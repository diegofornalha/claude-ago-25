#!/usr/bin/env python3
"""
Teste de evolu√ß√£o da mem√≥ria epis√≥dica
Demonstra como o sistema aprende com repeti√ß√µes
"""

import asyncio
from episodic_rag_prototype import EpisodicRAG

async def test_memory_evolution():
    """Testa evolu√ß√£o da mem√≥ria com queries repetidas"""
    
    print("üß† TESTE DE EVOLU√á√ÉO DA MEM√ìRIA EPIS√ìDICA\n")
    print("=" * 60)
    
    rag = EpisodicRAG()
    
    # Queries para testar aprendizado
    test_queries = [
        # Primeira rodada - aprendendo
        ("Como implementar RAG?", "primeira vez"),
        ("Como implementar RAG?", "repeti√ß√£o imediata"),
        ("Busca vetorial", "novo t√≥pico"),
        ("Como implementar RAG?", "terceira vez"),
        ("Busca vetorial", "repeti√ß√£o"),
        
        # For√ßar consolida√ß√£o (threshold = 5)
        ("Embeddings", "trigger consolidation"),
        
        # Testar mem√≥ria consolidada
        ("Como implementar RAG?", "ap√≥s consolida√ß√£o"),
        ("Busca vetorial", "ap√≥s consolida√ß√£o"),
    ]
    
    print("üìä Executando queries e observando aprendizado:\n")
    
    for i, (query, context) in enumerate(test_queries, 1):
        print(f"\nüîç Query {i}: '{query}' ({context})")
        print("-" * 50)
        
        phases_seen = []
        latencies = []
        
        async for result in rag.progressive_search(query):
            phase = result['phase']
            latency = result['latency']
            confidence = result['confidence']
            num_results = len(result['results'])
            
            phases_seen.append(phase)
            latencies.append(latency)
            
            # Mostrar apenas a fase final para clareza
            if phase == 'deep_learning':
                print(f"  üìç Fase final: {latency}ms, {num_results} resultados, confian√ßa: {confidence:.2f}")
        
        # An√°lise especial para queries repetidas
        if "repeti√ß√£o" in context or "ap√≥s" in context:
            avg_latency = sum(latencies) / len(latencies) if latencies else 0
            print(f"  ‚ö° Lat√™ncia m√©dia: {avg_latency:.0f}ms")
            
            # Verificar se houve melhoria
            if 'working_memory' in phases_seen:
                print(f"  ‚úÖ CACHE HIT! Resposta instant√¢nea da mem√≥ria de trabalho")
            elif 'episodic' in phases_seen:
                print(f"  ‚úÖ Mem√≥ria epis√≥dica ativada - aprendizado em a√ß√£o")
            elif 'semantic' in phases_seen:
                print(f"  ‚úÖ Padr√£o consolidado na mem√≥ria sem√¢ntica")
        
        # Simular feedback positivo para queries sobre RAG
        if "RAG" in query and rag.episodic_memory:
            rag.episodic_memory[-1].success_score = 0.9
            print(f"  üëç Feedback positivo registrado")
        
        # Pequena pausa para simular uso real
        await asyncio.sleep(0.2)
    
    print("\n" + "=" * 60)
    print("üìà ESTAT√çSTICAS FINAIS DE APRENDIZADO:")
    print("=" * 60)
    
    stats = rag.get_learning_stats()
    
    print(f"""
  Total de epis√≥dios: {stats['total_episodes']}
  Padr√µes sem√¢nticos: {stats['semantic_patterns']}
  Itens em mem√≥ria de trabalho: {stats['working_memory_size']}
  Taxa m√©dia de sucesso: {stats['avg_success_rate']:.2%}
  Total de buscas: {stats['total_searches']}
  Cache de embeddings: {stats['cache_size']}
    """)
    
    # Verificar consolida√ß√£o
    if stats['semantic_patterns'] > 0:
        print("  üéØ CONSOLIDA√á√ÉO DETECTADA!")
        print(f"  {stats['semantic_patterns']} padr√µes aprendidos e consolidados")
    
    # An√°lise de performance
    print("\nüìä AN√ÅLISE DE PERFORMANCE:")
    print("-" * 40)
    
    if stats['total_episodes'] >= 5:
        print("  ‚úÖ Sistema com mem√≥ria epis√≥dica ativa")
    
    if stats['cache_size'] > 3:
        print(f"  ‚úÖ Cache eficiente: {stats['cache_size']} embeddings reutiliz√°veis")
    
    if stats['avg_success_rate'] > 0.5:
        print(f"  ‚úÖ Alta taxa de sucesso: {stats['avg_success_rate']:.0%}")
    
    # Salvar estat√≠sticas para an√°lise
    import json
    with open('.episodic_cache/test_stats.json', 'w') as f:
        json.dump(stats, f, indent=2)
    
    print("\nüíæ Estat√≠sticas salvas em .episodic_cache/test_stats.json")
    
    return stats

def main():
    """Executa teste de evolu√ß√£o"""
    print("\n" + "üöÄ " * 20)
    print("INICIANDO TESTE DE EVOLU√á√ÉO DA MEM√ìRIA EPIS√ìDICA")
    print("üöÄ " * 20 + "\n")
    
    stats = asyncio.run(test_memory_evolution())
    
    # Verificar sucesso
    success = (
        stats['total_episodes'] >= 5 and
        stats['cache_size'] >= 3 and
        stats['avg_success_rate'] > 0.3
    )
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
        print("O sistema demonstrou capacidade de aprendizado e mem√≥ria")
    else:
        print("‚ö†Ô∏è TESTE CONCLU√çDO COM OBSERVA√á√ïES")
        print("O sistema precisa de mais intera√ß√µes para demonstrar aprendizado completo")
    print("=" * 60)
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())