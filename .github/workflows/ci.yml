name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('mcp-rag-server/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./mcp-rag-server
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff black pytest pytest-cov
    
    - name: Lint with ruff
      working-directory: ./mcp-rag-server
      run: |
        ruff check *.py || true  # Non-blocking for now
    
    - name: Format check with black
      working-directory: ./mcp-rag-server
      run: |
        black --check *.py || true  # Non-blocking for now
    
    - name: Test imports
      working-directory: ./mcp-rag-server
      run: |
        python -c "from rag_server_improved import ImprovedRAGServer"
        python -c "import numpy, sklearn, flask"
    
    - name: Run tests
      working-directory: ./mcp-rag-server
      run: |
        python test_improved.py

  node-tests:
    name: Node.js Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        cache-dependency-path: |
          todos/app_todos_bd_tasks/frontend/pnpm-lock.yaml
          todos/app_todos_bd_tasks/backend/pnpm-lock.yaml
    
    - name: Install frontend dependencies
      working-directory: ./todos/app_todos_bd_tasks/frontend
      run: pnpm install --frozen-lockfile
    
    - name: Type check frontend
      working-directory: ./todos/app_todos_bd_tasks/frontend
      run: pnpm run type-check || true  # Non-blocking
    
    - name: Lint frontend
      working-directory: ./todos/app_todos_bd_tasks/frontend
      run: pnpm run lint || true  # Non-blocking
    
    - name: Install backend dependencies
      working-directory: ./todos/app_todos_bd_tasks/backend
      run: pnpm install --frozen-lockfile
    
    - name: Type check backend
      working-directory: ./todos/app_todos_bd_tasks/backend
      run: pnpm run type-check || true  # Non-blocking

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      working-directory: ./mcp-rag-server
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test MCP Protocol
      working-directory: ./mcp-rag-server
      run: |
        echo '{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {}}' | \
        timeout 5 python rag_server_improved.py | \
        python -m json.tool || echo "MCP test completed"
    
    - name: Start API and test health
      working-directory: ./mcp-rag-server
      run: |
        python create_api_endpoint.py &
        sleep 5
        curl -f http://localhost:5001/api/rag/health || exit 1
        kill %1

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check file structure
      run: |
        test -f mcp-rag-server/requirements.txt
        test -f mcp-rag-server/README.md
        test -f mcp-rag-server/Makefile
        test -f mcp-rag-server/rag_server_improved.py
        echo "âœ“ All required files present"
    
    - name: Validate JSON configs
      run: |
        for file in $(find . -name "*.json" -not -path "*/node_modules/*"); do
          python -m json.tool "$file" > /dev/null || echo "Invalid JSON: $file"
        done